{"version":3,"sources":["components/AllFacts.js","components/Fact.js","App.js","index.js"],"names":["AllFacts","useStore","facts","setFacts","useState","loading","setLoading","loadError","setLoadError","find","a","length","fetchFacts","axios","get","timeout","result","data","useEffect","Loader","active","Segment","List","relaxed","map","fact","Item","key","text","Content","Header","as","Link","to","_id","Button","primary","onClick","Fact","id","setFact","history","useHistory","undefined","found","f","fetchFact","Divider","type","upvotes","user","name","first","last","push","createStore","App","Container","style","paddingTop","exact","path","render","match","params","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f0c856af.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { List, Button, Segment, Loader } from \"semantic-ui-react\"\nimport { Link } from \"react-router-dom\"\nimport { useStore } from \"react-hookstore\"\nimport axios from \"axios\"\n\nconst AllFacts = () => {\n  const [facts, setFacts] = useStore(\"factStore\")\n  const [loading, setLoading] = useState(true)\n  const [loadError, setLoadError] = useState(false)\n\n  const find = async () => {\n    if (facts.length === 0) {\n      await fetchFacts()\n    }\n    setLoading(false)\n  }\n\n  const fetchFacts = async () => {\n    setLoading(true)\n\n    try {\n      const result = await axios.get(\"/api/facts\", {\n        timeout: 10000\n      })\n      setFacts(result.data)\n    } catch (error) {\n      setLoadError(true)\n    }\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    find()\n  }, [])\n\n  if (loadError) {\n    return <h3>Error retrieving cat facts</h3>\n  }\n\n  if (loading) {\n    return <Loader active>Loading your spicy cat facts</Loader>\n  }\n\n  return (\n    <>\n      <Segment>\n        <List relaxed=\"very\">\n          {facts.map(fact => (\n            <List.Item key={fact.text}>\n              <List.Content>{fact.text}</List.Content>\n              <List.Header as={Link} to={`facts/${fact._id}`}>\n                Link\n              </List.Header>\n            </List.Item>\n          ))}\n        </List>\n      </Segment>\n      <Button primary onClick={() => fetchFacts()}>\n        New Facts!\n      </Button>\n    </>\n  )\n}\n\nexport default AllFacts\n","import React, { useEffect, useState } from \"react\"\nimport { Button, Segment, Divider, Loader } from \"semantic-ui-react\"\nimport axios from \"axios\"\nimport { useStore } from \"react-hookstore\"\nimport { useHistory } from \"react-router-dom\"\n\nconst Fact = ({ id }) => {\n  const [facts] = useStore(\"factStore\")\n  const [fact, setFact] = useState()\n\n  const [loadError, setLoadError] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  const history = useHistory()\n\n  useEffect(() => {\n    find()\n  }, [])\n\n  const find = async () => {\n    const found = facts.find(f => f._id === id)\n\n    if (found !== undefined) {\n      setFact(found)\n    } else {\n      await fetchFact()\n    }\n    setLoading(false)\n  }\n\n  const fetchFact = async () => {\n    try {\n      const result = await axios.get(`/api/facts/${id}`, {\n        timeout: 10000\n      })\n      setFact(result.data)\n    } catch (error) {\n      setLoadError(true)\n    }\n  }\n\n  if (loadError) {\n    return <h3>Error retrieving cat fact</h3>\n  }\n\n  if (loading) {\n    return <Loader active>Loading your spicy cat fact</Loader>\n  }\n\n  return (\n    <div>\n      <Segment>\n        <Divider></Divider>\n\n        <div>Text: {fact.text}</div>\n        <Divider></Divider>\n        <div>Type: {fact.type}</div>\n        <Divider></Divider>\n\n        <div>Upvotes: {fact.upvotes}</div>\n        <Divider></Divider>\n\n        <div>\n          Added By: {fact.user.name.first} {fact.user.name.last}\n        </div>\n        <Divider></Divider>\n      </Segment>\n      <Button onClick={() => history.push(\"/\")}>Back</Button>\n    </div>\n  )\n}\n\nexport default Fact\n","import { Container } from \"semantic-ui-react\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\nimport AllFacts from \"./components/AllFacts\"\nimport Fact from \"./components/Fact\"\nimport { createStore } from \"react-hookstore\"\nimport React from \"react\"\n\ncreateStore(\"factStore\", [])\n\nconst App = () => {\n  // Switch handles first match\n  return (\n    <Router>\n      <Container style={{ paddingTop: 10 }}>\n        <Switch>\n          <Route\n            exact\n            path=\"/facts/:id\"\n            render={({ match }) => <Fact id={match.params.id} />}\n          />\n          <Route\n            path=\"*\"\n            render={() => (\n              <>\n                <AllFacts />\n              </>\n            )}\n          />\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}